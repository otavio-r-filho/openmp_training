Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ser_mm.c(36,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ser_mm.c(37,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ser_mm.c(37,13)
      remark #15389: vectorization support: reference a_ has unaligned access   [ ser_mm.c(38,19) ]
      remark #15388: vectorization support: reference b_ has aligned access   [ ser_mm.c(42,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.430 
      remark #15487: type converts: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ser_mm.c(41,13)
   LOOP END

   LOOP BEGIN at ser_mm.c(37,13)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference a_ has unaligned access   [ ser_mm.c(38,19) ]
      remark #15388: vectorization support: reference b_ has aligned access   [ ser_mm.c(42,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ser_mm.c(37,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ser_mm.c(40,7)
LOOP END

LOOP BEGIN at ser_mm.c(44,7)
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy   [ ser_mm.c(45,13) ]

   LOOP BEGIN at ser_mm.c(45,13)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END
LOOP END

LOOP BEGIN at ser_mm.c(50,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ser_mm.c(50,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ser_mm.c(50,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ser_mm.c(50,7)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ser_mm.c(52,19)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ser_mm.c(51,13)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.515
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15448: unmasked aligned unit stride loads: 4 
                  remark #15449: unmasked aligned unit stride stores: 16 
                  remark #15450: unmasked unaligned unit stride loads: 4 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 142 
                  remark #15477: vector loop cost: 34.000 
                  remark #15478: estimated potential speedup: 4.130 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END

            LOOP BEGIN at ser_mm.c(52,19)
            <Remainder>
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ser_mm.c(51,13)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.735
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15448: unmasked aligned unit stride loads: 4 
                  remark #15449: unmasked aligned unit stride stores: 4 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 36 
                  remark #15477: vector loop cost: 8.500 
                  remark #15478: estimated potential speedup: 4.190 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ser_mm.c(50,7)
         <Remainder>
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ser_mm.c(52,19)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ser_mm.c(51,13)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15399: vectorization support: unroll factor set to 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.308
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15448: unmasked aligned unit stride loads: 1 
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 9 
                  remark #15477: vector loop cost: 3.250 
                  remark #15478: estimated potential speedup: 2.740 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 1.231
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ser_mm.c(36,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ser_mm.c(37,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ser_mm.c(37,13)
      remark #15389: vectorization support: reference a_ has unaligned access   [ ser_mm.c(38,19) ]
      remark #15388: vectorization support: reference b_ has aligned access   [ ser_mm.c(42,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.430 
      remark #15487: type converts: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ser_mm.c(37,13)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference a_ has unaligned access   [ ser_mm.c(38,19) ]
      remark #15388: vectorization support: reference b_ has aligned access   [ ser_mm.c(42,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ser_mm.c(37,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ser_mm.c(50,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ser_mm.c(50,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ser_mm.c(50,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ser_mm.c(50,7)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ser_mm.c(52,19)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ser_mm.c(51,13)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.515
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15448: unmasked aligned unit stride loads: 4 
                  remark #15449: unmasked aligned unit stride stores: 16 
                  remark #15450: unmasked unaligned unit stride loads: 4 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 142 
                  remark #15477: vector loop cost: 34.000 
                  remark #15478: estimated potential speedup: 4.130 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END

            LOOP BEGIN at ser_mm.c(52,19)
            <Remainder>
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ser_mm.c(51,13)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.735
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15448: unmasked aligned unit stride loads: 4 
                  remark #15449: unmasked aligned unit stride stores: 4 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 36 
                  remark #15477: vector loop cost: 8.500 
                  remark #15478: estimated potential speedup: 4.190 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ser_mm.c(50,7)
         <Remainder>
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ser_mm.c(52,19)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ser_mm.c(51,13)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15399: vectorization support: unroll factor set to 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.308
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15448: unmasked aligned unit stride loads: 1 
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 9 
                  remark #15477: vector loop cost: 3.250 
                  remark #15478: estimated potential speedup: 2.740 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15388: vectorization support: reference c_ has aligned access   [ ser_mm.c(53,25) ]
                  remark #15389: vectorization support: reference b_ has unaligned access   [ ser_mm.c(53,25) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 1.231
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at ser_mm.c(51,13)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
